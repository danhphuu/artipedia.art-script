// ===== Config =====  update start/stop
const videoSelectors = [
  '#__next > main > div.jsx-2f273c7328ee0c1d.section-padding > div > div.jsx-2f273c7328ee0c1d.card-style-grid > div > div:nth-child(11) > div > div.jsx-f174233d83cae69a.iq-card.bg-black.card-hover > div > div.jsx-f174233d83cae69a.card-body.p-3',
  '#__next > main > div.jsx-2f273c7328ee0c1d.section-padding > div > div.jsx-2f273c7328ee0c1d.card-style-grid > div > div:nth-child(10) > div > div.jsx-f174233d83cae69a.iq-card.bg-black.card-hover > div > div.jsx-f174233d83cae69a.card-body.p-3',
  '#__next > main > div.jsx-2f273c7328ee0c1d.section-padding > div > div.jsx-2f273c7328ee0c1d.card-style-grid > div > div:nth-child(9) > div > div.jsx-f174233d83cae69a.iq-card.bg-black.card-hover > div > div.jsx-f174233d83cae69a.card-body.p-3',
  '#__next > main > div.jsx-2f273c7328ee0c1d.section-padding > div > div.jsx-2f273c7328ee0c1d.card-style-grid > div > div:nth-child(8) > div > div.jsx-f174233d83cae69a.iq-card.bg-black.card-hover > div > div.jsx-f174233d83cae69a.card-body.p-3',
  '#__next > main > div.jsx-2f273c7328ee0c1d.section-padding > div > div.jsx-2f273c7328ee0c1d.card-style-grid > div > div:nth-child(6) > div > div.jsx-f174233d83cae69a.iq-card.bg-black.card-hover > div > div.jsx-f174233d83cae69a.card-body.p-3',
  '#__next > main > div.jsx-2f273c7328ee0c1d.section-padding > div > div.jsx-2f273c7328ee0c1d.card-style-grid > div > div:nth-child(12) > div > div.jsx-f174233d83cae69a.iq-card.bg-black.card-hover > div > div.jsx-f174233d83cae69a.card-body.p-3'
];
const claimButtonSelector = 'button.fw-bold.pulse-animation.btn.btn-warning.btn-lg';
const reloadButtonSelector = '#__next > main > div.section-padding > div > div > button';
const interruptedSelector = 'div.text-white.px-3.py-1.rounded-pill.small.d-flex.align-items-center.gap-2';
const closePopupSelector = 'body > div.fade.artipedia-video-modal.modal.show > div > div > div > div:nth-child(1) > div.jsx-8c4eaabccfb28791.position-absolute.top-0.end-0.m-3.d-flex.align-items-center.gap-2 > button';

// ===== Control Variables =====
let running = false;
let countdownInterval = null;

// ===== UI =====
const panel = document.createElement("div");
panel.style.position = "fixed";
panel.style.bottom = "20px";
panel.style.right = "20px";
panel.style.background = "rgba(0,0,0,0.8)";
panel.style.color = "white";
panel.style.padding = "12px";
panel.style.borderRadius = "10px";
panel.style.fontSize = "14px";
panel.style.zIndex = "99999";
panel.innerHTML = `
  <div>Status: <span id="auto-status" style="color:lime">Stopped</span></div>
  <div>⏳ <span id="auto-countdown" style="color:lime">0</span>s</div>
  <button id="toggle-btn" style="margin-top:8px; padding:4px 10px; border:none; border-radius:6px; background:#ff9800; color:#fff; cursor:pointer;">Start</button>
`;
document.body.appendChild(panel);

const statusEl = document.getElementById("auto-status");
const countdownEl = document.getElementById("auto-countdown");
const toggleBtn = document.getElementById("toggle-btn");

// ===== Helper Functions =====
function updateStatus(msg, color="lime") {
  statusEl.textContent = msg;
  statusEl.style.color = color;
}
function countdown(seconds, checkInterrupted=false) {
  return new Promise(resolve => {
    let remaining = Math.ceil(seconds);
    countdownEl.textContent = remaining;
    countdownEl.style.color = "lime";
    clearInterval(countdownInterval);
    countdownInterval = setInterval(() => {
      if (!running) {
        updateStatus("⏸ Đang dừng vòng lặp...", "orange");
        clearInterval(countdownInterval);
        resolve("stopped");
        return;
      }

      remaining--;
      countdownEl.textContent = remaining;

      // Kiểm tra bị Interrupted
      if (checkInterrupted) {
        const interruptedEl = document.querySelector(interruptedSelector);
        if (interruptedEl && interruptedEl.innerText.includes("🚫 Interrupted. Restart to earn points")) {
          updateStatus("🚫 Video bị gián đoạn, đóng popup...", "red");
          clearInterval(countdownInterval);

          // Đóng popup bằng nút X
          const closeBtn = document.querySelector(closePopupSelector);
          if (closeBtn) {
            closeBtn.click();
            updateStatus("❌ Đã đóng popup do Interrupted", "red");
          }

          resolve("interrupted");
          return;
        }
      }

      if (remaining <= 0) {
        clearInterval(countdownInterval);
        resolve("done");
      }
    }, 1000);
  });
}
async function waitForPopupClosed() {
  return new Promise(resolve => {
    const interval = setInterval(() => {
      const popup = document.querySelector(".modal-body");
      if (!popup) {
        clearInterval(interval);
        resolve();
      }
    }, 1000);
  });
}

// ===== Reload Watcher (luôn chạy nền) =====
setInterval(() => {
  if (!running) return;
  const reloadBtn = document.querySelector(reloadButtonSelector);
  if (reloadBtn) {
    updateStatus("🔄 Tìm thấy nút reload, chờ 2s...", "yellow");
    setTimeout(() => {
      if (reloadBtn && document.body.contains(reloadBtn)) {
        updateStatus("🔄 Đang reload, chờ 10s...", "yellow");
        reloadBtn.click();
        setTimeout(() => {
          updateStatus("✅ Reload xong, tiếp tục...", "lime");
        }, 10000);
      }
    }, 2000);
  }
}, 3000);

// ===== Main Flow =====
async function autoLoop() {
  while (running) {
    const selector = videoSelectors[Math.floor(Math.random() * videoSelectors.length)];
    const videoCard = document.querySelector(selector);

    if (!running) break;

    if (videoCard) {
      updateStatus("🎬 Đang mở video...", "lime");
      videoCard.click();
      await countdown(5);

      if (!document.querySelector(".modal-body")) {
        updateStatus("⚠️ Popup không hiện, thử lại...", "red");
        videoCard.click();
        await countdown(5);
      }

      const video = document.querySelector(".modal-body video");
      if (video && video.duration) {
        const duration = Math.ceil(video.duration);
        updateStatus("▶️ Đang xem video...", "lime");
        const result = await countdown(duration, true); // checkInterrupted = true

        if (result === "interrupted" || result === "stopped") {
          await countdown(5);
          continue;
        }
      } else {
        updateStatus("❌ Không tìm thấy video trong popup!", "red");
        await countdown(10);
        continue;
      }

      const claimBtn = document.querySelector(claimButtonSelector);
      if (claimBtn) {
        updateStatus("💰 Claim reward...", "yellow");
        claimBtn.click();
        await countdown(15);
        await waitForPopupClosed();
      }

      updateStatus("✅ Xong 1 vòng, nghỉ 7s...", "lime");
      await countdown(7);
    } else {
      updateStatus("❌ Không tìm thấy video, thử lại...", "red");
      await countdown(5);
    }
  }
}

// ===== Start/Stop Button =====
toggleBtn.addEventListener("click", () => {
  if (!running) {
    running = true;
    updateStatus("▶️ Script đang chạy...", "lime");
    toggleBtn.textContent = "Stop";
    autoLoop();
  } else {
    running = false;
    updateStatus("⏸ Script đã dừng", "orange");
    toggleBtn.textContent = "Start";
  }
});
